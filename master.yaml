AWSTemplateFormatVersion: "2010-09-09"
Description: Cloudformation for test

Parameters:

  MasterStackName:
    Type: String
    Default: cf-test-dev

  ECSInstanceType:
    Type: String
    Default: t2.micro

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16

  PubSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24

  PubSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24

  LoadBalancerNameParameter:
    Type: String
    Description: The new Load Balancer Name
    MaxLength: 32

  ECSImageId:
    Description: Image id for ECS instances.
    Type: String

  ECSAsgMinSize:
    Type: Number
    Default: 1
    Description: minimal size and initial Desired Capacity of ecs auto scaling group

  ECSAsgMaxSize:
    Type: Number
    Default: 2
    Description: maximum size and initial Desired Capacity of ecs auto scaling group

  ECSDesiredCapacity:
    Type: Number
    Default: 2
    Description: desired capacity of ecs auto scaling group

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /

  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 2

  DesiredCount:
    Description: 'The number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1

Mappings:
  AWSRegionToAMI:
    eu-central-1:
      AMI: ami-721aec1d

######

Resources:

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
          - Key: Name
            Value: !Ref MasterStackName

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [0, !GetAZs '']
          CidrBlock: !Ref PubSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub ${MasterStackName} Public Subnet (AZ0)

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [1, !GetAZs '']
          CidrBlock: !Ref PubSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub ${MasterStackName} Public Subnet (AZ1)

  InternetGatway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
          Tags:
              - Key: Name
                Value: !Ref MasterStackName

  InternetGatewayAttachment:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            InternetGatewayId: !Ref InternetGatway
            VpcId: !Ref VPC

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub ${MasterStackName} Public Routes

  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGatway
            Tags:
              - Key: Name
                Value: !Ref MasterStackName


  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1
            Tags:
              - Key: Name
                Value: !Ref MasterStackName


  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
        GroupName: ALBSecGroup
        GroupDescription: SecGroup for Application Load Balanser
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '95.47.136.88/32'
        Tags:
            - Key: Name
              Value: !Sub ${MasterStackName}-LoadBalancer

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
        GroupName: !Sub '${MasterStackName}-ec2'
        GroupDescription: SecGroup for Cluster
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 32768
          ToPort: 61000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        Tags:
            - Key: Name
              Value: !Sub ${MasterStackName}-sg-CLUSTER

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
        Name: !Sub '${MasterStack}'
        HealthCheckIntervalSeconds: 60
        UnhealthyThresholdCount: 10
        HealthCheckPath: /
        Name: ALBMyTargetGroup
        Port: '80'
        Protocol: HTTP
        VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${MasterStackName}-target-sg
    DependsOn: ApplicationLoadBalancer


  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
        Name: !Ref MasterStackName
        Scheme: internet-facing
        Subnets:
           - !Ref PublicSubnet1
           - !Ref PublicSubnet2
        SecurityGroups:
           - !Ref ALBSecurityGroup
        Tags:
            - Key: Name
              Value: !Sub ${MasterStackName}-ALB

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
        LoadBalancerArn: !Ref ApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref ALBTargetGroup
         Tags:
            - Key: Name
              Value: !Sub ${MasterStackName}-ALBListener
    DependsOn: ECSRole


  ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
        ListenerArn: !Ref ALBListener
        Priority: 1
        Conditions:
            - Field: path-pattern
              Values:
                - !Ref Path
        Actions:
            - TargetGroupArn: !Ref ALBTargetGroup
              Type: forward
          Tags:
            - Key: Name
              Value: !Sub ${MasterStackName}-ALBListenerRule
    DependsOn: ALBListener


######

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref MasterStackName

  ECSInstanceAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      VPCZoneIdentifier:
         -  !Ref PublicSubnet1
         -  !Ref PublicSubnet2
      MinSize: !Ref ECSAsgMinSize
      MaxSize: !Ref ECSAsgMaxSize
      DesiredCapacity: !Ref ClusterSize
      HealthCheckGracePeriod: 50
      HealthCheckType: EC2
      Tags:
        - Key: Name
          Value: !Sub ${MasterStackName}-AutoScalingGroup
          PropagateAtLaunch: 'true'

  ECSLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref ECSInstanceType
      IamInstanceProfile: !Ref ECSInstanceProfile
      SecurityGroups:
          - !Ref ECSSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum -y --security update
          service docker restart
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
        Tags:
          - Key: Name
            Value: !Sub ${MasterStackName}-LaunchConfig


  ECSAutoscalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                    - 'application-autoscaling.amazonaws.com'
            Action:
                    - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecsautoscaling1
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'
          Tags:
          - Key: Name
            Value: !Sub ${MasterStackName}-AutoscalingRole

  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${MasterStackName}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                  - 'ecs.amazonaws.com'
            Action:
                  - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:Describe*'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'
          Tags:
          - Key: Name
            Value: !Sub ${MasterStackName}-ECSRole
#
  ECSInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${MasterStackName}-aplication-instance'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: "AmazonEC2ContainerServiceforEC2Role"
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:ListContainerInstances"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'
         Tags:
          - Key: Name
            Value: !Sub ${MasterStackName}-InstanceRole

  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${MasterStackName}-apache'
      Cluster: !Ref ECSCluster
      Role: !Ref ECSRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
          - ContainerName: !Sub '${MasterStackName}-apache'
            ContainerPort: '80'
            TargetGroupArn: !Ref ALBTargetGroup
        Tags:
          - Key: Name
            Value: !Sub ${MasterStackName}-Service

  ECSInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
          - !Ref ECSInstanceRole
        Tags:
          - Key: Name
            Value: !Sub ${MasterStackName}-InstanceProfile

  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Sub '${MasterStackName}-apache-app'
      ContainerDefinitions:
          - Name: !Sub '${MasterStackName}-apache'
            Hostname: apache
            Essential: true
            Image: 'httpd'
            Cpu: "256"
            Memory: "500"
            PortMappings:
              - ContainerPort: '80'
                HostPort: 0
          Tags:
            - Key: Name
              Value: !Sub ${MasterStackName}-TaskDefinition
#


